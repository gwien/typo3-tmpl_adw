ant.importBuild 'build.xml'

loadConfiguration()

def loadConfiguration() {
    def environment = hasProperty('env') ? env : 'dev'
    project.ext.set("environment", environment)
    println "Building for $environment environment"

    defaultTasks = ['cleanUp', 'prepare', 'getFontAwesome', 'compileSass', 'combineJs']

    if (environment == 'prod') {
        defaultTasks.add('minifyJs')
    }
}

// Invoke the plugin
apply plugin: 'compass'
apply plugin: 'js'
apply plugin: 'css'

project.ext.set("jsSrcDir", "Resources/Private/JavaScript")
project.ext.set("jsDestDir", "Resources/Public/JavaScript")
project.ext.set("cssSrcDir", "Resources/Public/Css")

project.ext.set(
        'libraryVersions', [
        fontAwesome: '4.1.0'
])

FileCollection buildDirectories = files([
        'Build/logs',
        'Build/lib',
        'Build/pdepend',
        'Build/tmp/FontAwesome'
])

FileCollection generatedFiles = files([
        cssSrcDir + '/adw.css',
        jsDestDir + '/production.js',
        jsDestDir + '/production.min.js',
        jsDestDir + '/production.sourcemap.json'
])


task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

// Pull the plugin from Maven Central
buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://dl.bintray.com/robfletcher/gradle-plugins' }
    }
    dependencies {
        classpath 'org.gradle.plugins:gradle-compass:1.0.9'
        classpath 'com.eriwen:gradle-js-plugin:1.9.0'
        classpath 'com.eriwen:gradle-css-plugin:1.8.3'
    }
}

repositories {
    mavenCentral()
}

compass {
    cssDir = file('Resources/Public/Css')
    sassDir = file('Resources/Private/Scss')
    fontsDir = file('Resources/Public/Fonts')
    noLineComments = (environment == 'dev' ? false : true)
    outputStyle = (environment == 'dev' ? 'expanded' : 'compressed')
    debugInfo = (environment == 'dev' ? true : false)
}

task cleanUp << {
    description 'Cleanup build artifacts'
    buildDirectories.each { File file ->
        delete file
    }

    generatedFiles.each { File file ->
        delete file
    }
}

task prepare << {
    description 'Prepare for build'


    buildDirectories.each { File file ->
        file.mkdirs()
    }
}

// Declare your sources
javascript.source {
    dev {
        js {
            srcDir jsSrcDir
            include "*.js"
            exclude "*.min.js"
        }
    }
}

css.source {
    dev {
        css {
            srcDir cssSrcDir
            include "*.css"
            exclude "*.min.css"
        }
    }
}

combineJs {
    source = javascript.source.dev.js.files
    dest = file("Resources/Public/JavaScript/production.js")
}

minifyJs {
    source = combineJs
    dest = file("Resources/Public/JavaScript/production.min.js")
    sourceMap = file("Resources/Public/JavaScript/production.sourcemap.json")
    closure {
        warningLevel = 'QUIET'
    }
}

task getFontAwesome(dependsOn: prepare) << {
    if (!file("Build/tmp/FontAwesome/font-awesome-' + libraryVersions.fontAwesome + '.zip'").exists()) {
        ant.get(src: 'https://github.com/FortAwesome/Font-Awesome/archive/' + libraryVersions.fontAwesome + '.zip',
                dest: 'Build/tmp/FontAwesome/font-awesome-' + libraryVersions.fontAwesome + '.zip',
                usetimestamp: true,
                verbose: true)
        ant.unzip(src: 'Build/tmp/FontAwesome/font-awesome-' + libraryVersions.fontAwesome + '.zip',
                  dest: "Build/tmp/FontAwesome/")

        copy {
            from 'Build/tmp/FontAwesome/font-awesome-' + libraryVersions.fontAwesome + '/fonts'
            into compass.fontsDir
        }
        copy {
            from 'Build/tmp/FontAwesome/font-awesome-' + libraryVersions.fontAwesome + '/scss'
            into 'Resources/Private/Scss/_Includes/_FontAwesome'
            exclude '**/_variables.scss'
            rename('font-awesome.scss', '_font-awesome.scss')
        }
    }
}